#include <iostream>
#include <fstream>
using namespace std;
#include "Manager.h"
#include "Huffman.cpp"
#include "md5.cpp"
#include <stdlib.h>
string http = " http://localhost:3000/GOT/api/";
Manager::Manager(string usr)
{
    username = usr;
}


string getFileContent(string name)
{
    string STRING;
    string content;
	ifstream infile;
    
	infile.open (name);
        while(!infile.eof()) // To get you all the lines.
        {
	        getline(infile,STRING); // Saves the line in STRING.
	        content= content + STRING + "\n";
            //cout<<STRING<<endl; // Prints our STRING.
        }
	infile.close();
    return content;
}
void writeFile(string fileName, string content)
{
    ofstream myfile;
    myfile.open (fileName);
    myfile << content;
    myfile.close();
  
}
string cmdOutput(string cmd) 
{

    string data;
    FILE * stream;
    const int max_buffer = 256;
    char buffer[max_buffer];
    cmd.append(" 2>&1");

    stream = popen(cmd.c_str(), "r");
    if (stream) {
      while (!feof(stream))
        if (fgets(buffer, max_buffer, stream) != NULL) data.append(buffer);
          pclose(stream);
      }
    return data;
}
vector<string> Manager::split(const string& s, char delimiter)
{
   vector<string> tokens;
   string token;
   istringstream tokenStream(s);
   while (std::getline(tokenStream, token, delimiter))
   {
      tokens.push_back(token);
   }
   return tokens;
}
string Manager::decode(string table, string s)
{
	string decodedStr;
	vector<string> charCodes= Manager::split(table, '|');
	string subStr;
	for (int i=0; i< s.size();i++)
	{
		subStr+=s[i];
		for (int j=0; j< charCodes.size();j++)
		{
			vector<string> code= Manager::split(charCodes[j], '~');
			if (subStr==code[1])
			{
				decodedStr+=code[0];
				subStr="";
			}
		}

	}
	//cout<<"decoded: "<<decodedStr<<endl;
	return decodedStr;

} 



vector<string> Manager::encode(string str)
{
	//string str = "Pruebas para ver la codificacion y decodificacion"; 
	string encodedString, decodedString, table; 
	calcFreq(str, str.length()); 
	HuffmanCodes(str.length()); 
	//cout << "Character With their Frequencies:\n"; 
	for (auto v=codes.begin(); v!=codes.end(); v++) 
		//cout << v->first <<' ' << v->second << endl; 
		table= table+ v->first +'~'+ v->second + '|';

	for (auto i: str) 
		encodedString+=codes[i]; 
	//cout << "aaaaa: " << table;

	//cout << "\nEncoded Huffman data:\n" << encodedString << endl; 

	//decodedString = decode_file(minHeap.top(), encodedString); 
	//cout << "\nDecoded Huffman Data:\n" << decodedString << endl; 
	vector<string> vec;
	vec.push_back(table);
	vec.push_back(encodedString);
	//cout << "frecuencias: "<<vec[0]<<endl;
	//cout << "codificado"<<vec[1]<<endl;
	return vec;
	
}
void printStrVec(vector<string> vec)
{
    for(int i=0;i<vec.size();i++)
    {
        cout <<i<<": "<<vec[i] << endl;
    }
}
bool checkForFile(vector<string> fileVec, string fileName)
{
    for(int i=0;i<fileVec.size();i++)
    {
        if (fileVec[i]==fileName){return true;}
    }
    return false;
}
void Manager::init(string name)
{
    string url = http+"init/"+name;
    //auto response = cpr::Post(cpr::Url{url);
    //std::cout << response.text << std::endl; 
    cout << url <<endl;

}
void Manager::help()
{
    cout << getFileContent("help.txt");
}

void Manager::add(string file)
{
    string ignore = getFileContent("gotignore.txt");
    vector<string> ignoreFiles = Manager::split(ignore,'\n');
    if (file == "-A")
    {
        string i;
        i = cmdOutput("ls");
        vector<string> allFiles= Manager::split(i,'\n');
        

        for(int j=0;j<allFiles.size();j++)
        {
            vector<string> temp=Manager::split(allFiles[j],'.');
            if (temp.size()>1)
            {
                if (temp[1]=="txt" && !checkForFile(files,allFiles[j]) && !checkForFile(ignoreFiles,allFiles[j]))
                {
                    files.push_back(allFiles[j]);
                }
            
            }
            
        }
        cout << "Archivos agregados: " <<endl;
        printStrVec(files);
        
    }
    else
    {
        if(!checkForFile(files,file) && !checkForFile(ignoreFiles,file))
        {
            files.push_back(file);
        }
    }
    
}
void Manager::commit(string message)
{
    if (files.empty())
    {
        cout << "Debe agregar archivos, para ver los comandos escriba got help " << endl;
    }
    else
    {
        
        for(int i =0; i<files.size();i++)
        {
            string fileContent = getFileContent(files[i]); //Cada archivo con cambios
            vector <string> fileVec=encode(fileContent);
            string dictionary= fileVec[0];//Diccionario que se crea
            string encodedFile = fileVec[1];//Cambios con huffman
            string url = http+"commit/"+files[i]+"/"+md5(message)+"/"+encodedFile+"/"+ dictionary+"/"+message;
            //auto response = cpr::Post(cpr::Url{url);
            //std::cout << response.text << std::endl; 
            cout << url <<endl;

        }
    }
}
void Manager::status(string file)
{
    string url;
    if (file =="")
    {
        //string out = cmdOutput("diff -q "+file+" ServerFile.txt");
        //if(out=="")
        string temporal = "Archivo1.txt/\n~0001| ~111|'~011100|(~0000110110|)~1001000001|,~0000111|?~1100100|A~100100011|B~100100001|D~00001011|H~0000100|I~110011|J~0000110111|M~1001000000|N~100100111|O~10010010|P~000011010|T~100100010|W~011110|Y~00001100|a~10101|b~00001010|c~1100101|d~10001|e~001|f~0111011|g~00000|h~11011|i~11010|k~011111|l~10000|m~100101|n~0101|o~1011|p~100100110|r~01000|s~10011|t~0110|u~10100|v~0111010|w~11000|y~01001|
        url = http+"status";
        //auto response = cpr::Post(cpr::Url{url);
        //std::cout << response.text << std::endl;
        vector<string> vecResp=Manager::split(temporal, '/');
        vector <string> cambiados;
        vector <string> sinCambio;
        vector <string> eliminados;

        for (int i=0;i<vecResp.size();i+=3)
        {
            cout << "Archivo: "<< vecResp[i] <<endl;
            cout << "Diccionario: "<< vecResp[i+1] <<endl;
            cout << "Contenido: "<< vecResp[i+2] <<endl;
            cout << "-----------------------" <<endl;
            writeFile("ServerFile.txt",decode(vecResp[i+1], vecResp[i+2]));
            string out = cmdOutput("diff -q "+file+" ServerFile.txt");
            if (!checkForFile(files,vecResp[i]))
            {
                eliminados.push_back(vecResp[i]);
            }
            if(out=="")
            {
                sinCambio.push_back(vecResp[i]);
            }
            else
            {
                cambiados.push_back(vecResp[i]);
            }
            
        }
        cout << "Archivos agregados: " <<endl;
        printStrVec(files);
        cout << "Archivos eliminados: " <<endl;
        printStrVec(eliminados);
        cout << "Archivos editados: " <<endl;
        printStrVec(cambiados);

    }
    else
    {
        
        string temporal = "fecha1/Archivo1.txt/commit id1/commitmsj1/\n~0001| ~111|'~011100|(~0000110110|)~1001000001|,~0000111|?~1100100|A~100100011|B~100100001|D~00001011|H~0000100|I~110011|J~0000110111|M~1001000000|N~100100111|O~10010010|P~000011010|T~100100010|W~011110|Y~00001100|a~10101|b~00001010|c~1100101|d~10001|e~001|f~0111011|g~00000|h~11011|i~11010|k~011111|l~10000|m~100101|n~0101|o~1011|p~100100110|r~01000|s~10011|t~0110|u~10100|v~0111010|w~11000|y~01001|
        url = http+"status/"+file;
        //auto response = cpr::Post(cpr::Url{url);
        //std::cout << response.text << std::endl;
        vector<string> vecResp=Manager::split(temporal, '/');
        for(int i=0;i<vecResp.size();i+=6)
        {
            cout << "Archivo: "<< vecResp[i+1] <<endl;
            cout << "Fecha: "<< vecResp[i] <<endl;
            cout << "Commit ID: "<< vecResp[i+2] <<endl;
            cout << "Mensaje: "<< vecResp[i+3] <<endl;
            cout << "Diferencias con el original: "<<endl;
            writeFile("ServerFile.txt",decode(vecResp[i+4], vecResp[i+5]));
            string comando="diff -u " +file + " ServerFile.txt";
            system(comando.c_str());
            //cout << "Diccionario: "<< vecResp[i+4] <<endl;
            //cout << "Contenido: "<< vecResp[i+5] <<endl;
            cout << "-----------------------" <<endl;
        }

    }
    
     
    cout << url <<endl;
}
void Manager::rollback(string file, string commit)
{
    string url = http+"rollback/"+file+"/"+commit;
    //auto response = cpr::Post(cpr::Url{url);
    //std::cout << response.text << std::endl; 
    //vector<string> resp = Manager::split(response.text(), '/');
    //string dictionary= resp[0];
    //string decodedFile=resp[1];
    //debe llegar de la respuesta
    string dictionary="\n~0001| ~111|'~011100|(~0000110110|)~1001000001|,~0000111|?~1100100|A~100100011|B~100100001|D~00001011|H~0000100|I~110011|J~0000110111|M~1001000000|N~100100111|O~10010010|P~000011010|T~100100010|W~011110|Y~00001100|a~10101|b~00001010|c~1100101|d~10001|e~001|f~0111011|g~00000|h~11011|i~11010|k~011111|l~10000|m~100101|n~0101|o~1011|p~100100110|r~01000|s~10011|t~0110|u~10100|v~0111010|w~11000|y~01001|";
    string decodedFile
    
    writeFile(file,decode(dictionary,decodedFile));
    cout << url <<endl;
}
void Manager::reset(string file)
{
    string url = http+"newest/"+file;
    //auto response = cpr::Post(cpr::Url{url);
    //std::cout << response.text << std::endl;
    //vector<string> resp = Manager::split(response.text(), '/');
    //string dictionary= resp[0];
    //string decodedFile=resp[1];
    //debe llegar de la respuesta
    string dictionary="\n~0001| ~111|'~011100|(~0000110110|)~1001000001|,~0000111|?~1100100|A~100100011|B~100100001|D~00001011|H~0000100|I~110011|J~0000110111|M~1001000000|N~100100111|O~10010010|P~000011010|T~100100010|W~011110|Y~00001100|a~10101|b~00001010|c~1100101|d~10001|e~001|f~0111011|g~00000|h~11011|i~11010|k~011111|l~10000|m~100101|n~0101|o~1011|p~100100110|r~01000|s~10011|t~0110|u~10100|v~0111010|w~11000|y~01001|";
    string decodedFile
    
    writeFile(file,decode(dictionary,decodedFile));

    cout << url <<endl;
}
void Manager::sync(string file)
{
    
    string url = http+"newest/"+file;
    //auto response = cpr::Post(cpr::Url{url);
    //std::cout << response.text << std::endl; 
    //vector<string> resp = Manager::split(response.text(), '/');
    //string dictionary= resp[0];
    //string decodedFile=resp[1];
    string dictionary="\n~0001| ~111|'~011100|(~0000110110|)~1001000001|,~0000111|?~1100100|A~100100011|B~100100001|D~00001011|H~0000100|I~110011|J~0000110111|M~1001000000|N~100100111|O~10010010|P~000011010|T~100100010|W~011110|Y~00001100|a~10101|b~00001010|c~1100101|d~10001|e~001|f~0111011|g~00000|h~11011|i~11010|k~011111|l~10000|m~100101|n~0101|o~1011|p~100100110|r~01000|s~10011|t~0110|u~10100|v~0111010|w~11000|y~01001|";
    string decodedFile
    
    writeFile("ServerFile.txt",decode(dictionary,decodedFile));

    cout << "Cambios:" <<endl;
    string out = cmdOutput("diff -q "+file+" ServerFile.txt");
    if(out==""){
        cout << "¡El archivo está actualizado!" <<endl;
    }
    else
    {
        string comando="vimdiff " +file + " ServerFile.txt";
        system(comando.c_str());
    }
    
    
    cout << url <<endl;
}

void Manager::befriend(string name)
{
    string url = http+"befriend/"+name;
    //auto response = cpr::Post(cpr::Url{url);
    //std::cout << response.text << std::endl;
    cout << url <<endl;
}


void Manager::hello()
{
    //vector<string> vec=encode(getFileContent("Archivo1.txt"));
    //decode(vec[0],vec[1]);
    
    writeFile("example.txt", getFileContent("Archivo2.txt"));
    cout << "hello!" << endl;
}